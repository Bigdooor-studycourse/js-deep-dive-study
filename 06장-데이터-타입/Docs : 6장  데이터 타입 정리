# 데이터 타입
<br>

## 데이터 타입
<table>
  <thead>
    <tr>
      <td><b>구분</b></td>
        <td><b>데이터 타입</b></td>
    </tr>
  </thead>
  <tbody>
  <tr>
    <td rowspan="6">원시 타입</td>
    <td>숫자 타입</td>
  </tr>
  <tr>
    <td>문자열 타입</td>
  </tr>
  <tr>
    <td>불리언 타입</td>
  </tr>
  <tr>
    <td>undefined</td>
  </tr>
  <tr>
    <td>null 타입</td>
  </tr>
  <tr>
    <td>심벌 타입</td>
  </tr>
  </tbody>
    <tr>
      <td>객체 타입</td>
      <td>객체, 함수, 배열 등</td>
  </tr>
</table>

<br>

<br>

- 타입이 있는 이유
  - 목적과 용도
  - 메모리 공간의 크기
  - 메모리에 저장되는 2진수
  - 해석하는 방법이 다름

## 숫자 타입
- 모든 수를 실수 처리
- 2진수, 8진수, 16진수를 표현하기 위한 데이터 타입을 제공하지 않음
  - 모두 10진수로 해석 됌
  ```javascript
  var binary = 0b01000001; // 2진수
  var octal = 0o101; // 8진수
  var hex = 0x41; // 16진수
  // 표기법만 다를 뿐 모두 같은 값이다.

  console.log(binary); // 65
  console.log(octal); // 65
  console.log(hex); // 65
  console.log(binary === octal); // true
  console.log(octal === hex); 
  ```
- 3가지 특별한 값
  - Infinity : 양의 무한대
  - -Infinity : 음의 무한대
  - NaN : 산술 연산 불가(not-a-number)
    - NAN, Nan, nan은 값이 아닌 식별자로 해석, 에러 발생
  ```javascript
  // 숫자 타입의 세 가지 특별한 값
  console.log(10 / 0); // Infinity
  console.log(10 / -0); // -Infinity
  console.log(1 * 'String'); // NaN
  ```
## 문자열 타입
- '' , "", ``로 텍스트를 감싼다.
  ```javascript
  // 문자열 타입
  var string;
  string = '문자열'; // 작은따옴표
  string = "문자열"; // 큰따옴표
  string = `문자열`; // 백틱(ES6)
  ```
  <br>
  
  - '' (작은 따옴표)가 가장 일반적인 표기법
  
  <br>
  
  - 따옴표로 감싸지 않으면 식별자가 같은 토큰(어휘분석의 단위)으로 인식
  ```javascript
  // 따옴표로 감싸지 않은 hello를 식별자로 인식한다.
  var string = hello; // ReferenceError: hello is not defined
  ```
  
  <br>
  
  ```javascript
  string = '작은따옴표로 감싼 문자열 내의 "큰따옴표"는 문자열로 인식된다.';
  string = "큰따옴표로 감싼 문자열 내의 '작은따옴표'는 문자열로 인식된다.";
  ```
  
## 템플릿 리터럴
- (``)백틱 사용

<br>

- 멀티라인 문자열
  - 일반 문자열 내에서는 줄바꿈(개행)이 허용되지 않아서 이스케이프 시퀀스를 사용해야 된다.
  <details>
    <summary>이스케이프 시퀀스</summary>
    <div markdown="1">
      <table>
        <tr>
          <td><b>이스케이프 시퀀스</b></td>
          <td><b>의미</b></td>
        </tr>
        <tr>
          <td>\0</td>
          <td>Null</td>
        </tr>
        <tr>
          <td>\b</td>
          <td>백스페이스</td>
        </tr>
        <tr>
          <td>\f</td>
          <td>폼 피드 : 프린터로 출력할 경우 다음 페이지의 시작 지점으로 이동</td>
        </tr>
        <tr>
          <td>\n</td>
          <td>개행: 다음 행으로 이동</td>
        </tr>        
        <tr>
          <td>\r</td>
          <td>개행: 커서를 처음으로 이동</td>
        </tr>        
        <tr>
          <td>\t</td>
          <td>탭(수평)</td>
        </tr>        
        <tr>
          <td>\v</td>
          <td>탭(수직)</td>
        </tr>
        <tr>
          <td>\uXXXX</td>
          <td>유니코드, 예를 들어 '\u0041'은 'A', '\uD55C'는 '한'</td>
        </tr>
        <tr>
          <td>\'</td>
          <td>작은 따옴표</td>
        </tr>
        <tr>
          <td>\"</td>
          <td>큰 따옴표</td>
        </tr>
        <tr>
          <td>\\</td>
          <td>백슬래시</td>
        </tr>
      </table>
    </div>
  </details>
  
   ```javascript
  var template = '<ul>\n\t<li><a href="#">Home</a></li>\n</ul>';
  console.log(template);
  ```
  
  ```javascript
  //출력 결과
  <ul>
  <li><a href="#">Home</a></li>
  </ul>
  ```
  
 <br>
 
  - 템플릿 리터럴은 이스케이프 시퀀스를 사용하지 않고 줄바꿈이 허용됌
  - 공백 적용
  
  ```javascript
  var template = `<ul>
  <li><a href="#">Home</a></li>
  </ul>`;
  console.log(template);
  ```
  ```javascript
  //출력 결과
  <ul>
 <li><a href="#">Home</a></li>
  </ul>
  ```

- 표현식 삽입
  - 일반 문자열
  ```javascript
  var first = 'Ung-mo';
  var last = 'Lee';
  // ES5: 문자열 연결
  console.log('My name is ' + first + ' ' + last + '.'); // My name is Ung-mo Lee
  ```
  
  - 템플릿 리터럴
  ```javascript
  var first = 'Ung-mo';
  var last = 'Lee';
  // ES6: 표현식 삽입
  console.log(`My name is ${first} ${last}.`); // My name is Ung-mo Lee
  ```
- 태그드 템플릿

## 불리언 타입
- true, false
  ```javascript
  var foo = true;
  console.log(foo); // true
  foo = false;
  console.log(foo); // false
  ```
- 조건문에서 자주 사용
  ```javascript
  if (condition)
   statement1
  [else
   statement2]
   
   /*
   condition 은 참또는 거짓으로 평가되는 표현식이기 때문에
   불리언 타입의 값은 참과 거짓으로 구분되는 조건문에서 자주 사용
   */
  ```
## undefined 타입
- var 키워드로 선언한 변수는 암묵적으로 undefined로 초기화
  ```javascript
  var foo;
  console.log(foo); // undefined
  ```
  - 개발자가 의도적으로 할당하기 위한 값이 아니라 자바스크립트 엔진이 변수를 초기화 할 때 사용하는 값
  - 변수에 값이 없다는 것을 명시하고 싶을 땐, undefined가 아닌 null 할당

## null 타입
- 변수에 값이 없다는 것을 의도적으로 명시할 때 사용
- 변수가 이전에 할당되어 있던 값에 대한 참조를 명시적으로 제거
  ```javascript
  var foo = 'Lee';
  // 이전 참조를 제거. foo 변수는 더 이상 'Lee'를 참조하지 않는다.
  // 유용해 보이지는 않는다. 변수의 스코프를 좁게 만들어 변수 자체를 재빨리 소멸시키는 편이 낫다.
  foo = null;
  ```
- 함수가 유효한 값을 반환할 수 없는 경우 명시적으로 null을 반환하기도 한다.
  ```javascript
  <!DOCTYPE html>
  <html>
  <body>
    <script>
      var element = document.querySelector('.myClass');
  
      // HTML 문서에 myClass 클래스를 갖는 요소가 없다면 null을 반환한다.
      console.log(element); // null
    </script>
  </body>
  </html>
  ```

## 심벌 타입
- 변경 불가능한 원시 타입
- 다른 값과 절대 중복되지 않는 유일무이한 값
```javascript
// 심벌 값 생성
var key = Symbol('key');
console.log(typeof key); // symbol

// 객체 생성
var obj = {};

// 이름이 충돌할 위험이 없는 유일무이한 값인 심벌을 프로퍼티 키로 사용한다.
obj[key] = 'value';
console.log(obj[key]); // value
```

## 객체 타입
- 원시타입을 제외한 값은 모두 객체 타입

## 데이터 타입의 필요성
### 데이터 타입에 의한 메모리 공간의 확보와 참조
- 값의 종류에 따라 확보해야 할 메모리 공간의 크기가 결정된다.

